{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Udemy\\\\wooden-churner\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { googleSignInStart, emailSignInStart } from \"../../redux/user/user.actions\";\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from \"./sign-in.styles\";\n\nconst SignIn = () => {\n  const {\n    userCredentials,\n    setUserCrentials\n  } = useState({\n    email\n  });\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      emailSignInStart\n    } = this.props;\n    const {\n      email,\n      password\n    } = this.state;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  const {\n    googleSignInStart\n  } = this.props;\n  return /*#__PURE__*/React.createElement(SignInContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(SignInTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: this.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    handleChange: this.handleChange,\n    value: this.state.email,\n    label: \"email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: this.state.password,\n    handleChange: this.handleChange,\n    label: \"password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(ButtonsBarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 6\n    }\n  }, \" Sign in \"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }\n  }, \"Sign in with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["D:/React Udemy/wooden-churner/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignInContainer","SignInTitle","ButtonsBarContainer","SignIn","userCredentials","setUserCrentials","email","handleSubmit","event","preventDefault","props","password","state","handleChange","value","name","target","setState","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport FormInput from \"../form-input/form-input.component\";\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\n\r\nimport { googleSignInStart, emailSignInStart } from \"../../redux/user/user.actions\";\r\n\r\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from \"./sign-in.styles\";\r\n\r\nconst SignIn = () => {\r\n\tconst { userCredentials, setUserCrentials } = useState({ email });\r\n\tconst handleSubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst { emailSignInStart } = this.props;\r\n\t\tconst { email, password } = this.state;\r\n\r\n\t\temailSignInStart(email, password);\r\n\t};\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tconst { value, name } = event.target;\r\n\r\n\t\tthis.setState({ [name]: value });\r\n\t};\r\n\r\n\tconst { googleSignInStart } = this.props;\r\n\treturn (\r\n\t\t<SignInContainer>\r\n\t\t\t<SignInTitle>I already have an account</SignInTitle>\r\n\t\t\t<span>Sign in with your email and password</span>\r\n\r\n\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<FormInput\r\n\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\thandleChange={this.handleChange}\r\n\t\t\t\t\tvalue={this.state.email}\r\n\t\t\t\t\tlabel=\"email\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<FormInput\r\n\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tvalue={this.state.password}\r\n\t\t\t\t\thandleChange={this.handleChange}\r\n\t\t\t\t\tlabel=\"password\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<ButtonsBarContainer>\r\n\t\t\t\t\t<CustomButton type=\"submit\"> Sign in </CustomButton>\r\n\t\t\t\t\t<CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn>\r\n\t\t\t\t\t\tSign in with Google\r\n\t\t\t\t\t</CustomButton>\r\n\t\t\t\t</ButtonsBarContainer>\r\n\t\t\t</form>\r\n\t\t</SignInContainer>\r\n\t);\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tgoogleSignInStart: () => dispatch(googleSignInStart()),\r\n\temailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password })),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n"]},"metadata":{},"sourceType":"module"}